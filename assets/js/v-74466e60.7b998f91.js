"use strict";(self.webpackChunksss=self.webpackChunksss||[]).push([[434],{942:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-74466e60",path:"/es6/",title:"初识JavaScript",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"es6/README.md",git:{updatedTime:1635995013e3,contributors:[{name:"unknown",email:"2640634942@qq.com",commits:2}]}}},165:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(252).uE)('<h1 id="初识javascript" tabindex="-1"><a class="header-anchor" href="#初识javascript" aria-hidden="true">#</a> 初识JavaScript</h1><ol><li>JavaScript作为Netscape Navigetor浏览器的一部分首次出现在1996年，最初设计是改善网页的用户体验，作者是brendan Eich</li><li>起初JavaScript被命名为liveScript，后因跟Son公司改名为JavaScript</li></ol><h1 id="浏览器的组成" tabindex="-1"><a class="header-anchor" href="#浏览器的组成" aria-hidden="true">#</a> 浏览器的组成</h1><ol><li>浏览器中要有两部分组成，shell和内核部分，内核还包含了许多东西。</li><li>渲染引擎，内赫里渲染引擎主要负责html和css部分，定义了语法规则、渲染规则以及渲染路径和速度等等。</li><li>JS引擎，2001年发布了ie6，首次实现对JS引擎的优化。</li><li>2008年Google发布了Chrome，它是采用优化后的JS引擎，引擎代号V8，因能把JS代码直接转化成机械代码0101来执行，进而以速度快而闻名。</li><li>后来Firefox也推出了具有强大功能的JS引擎。</li></ol><h1 id="javascript特点" tabindex="-1"><a class="header-anchor" href="#javascript特点" aria-hidden="true">#</a> JavaScript特点</h1><ol><li>解释性语言 ---&gt; 不需要编译代码，可以跨平台，像php、js、jsp都是解释型语言。</li><li>单线程 ---&gt; 同时只能执行一件事情。</li><li>ECMA标准 ---&gt; 为了统一JS的规则，推出了ECMA标准，因此JS也称为ECMAScript。</li></ol><h1 id="javascript三大部分-ecmascript、dom、bom" tabindex="-1"><a class="header-anchor" href="#javascript三大部分-ecmascript、dom、bom" aria-hidden="true">#</a> JavaScript三大部分：ECMAScript、DOM、BOM</h1><ol><li>ECMAScript是符合ECMA标准的基本JaveScript。</li><li>DOM是Docmengt Object Model文档对象模型，可以才做html和css部分（非常重要的部分）。</li><li>BOM是Browser Object Model浏览器对象模型，操作浏览器shell的，因为每一个浏览器的不同，导致我们在每一个浏览器操作BOM都不一样</li></ol><h1 id="javesctipt的基础语法" tabindex="-1"><a class="header-anchor" href="#javesctipt的基础语法" aria-hidden="true">#</a> JaveSctipt的基础语法</h1><ol><li>变量声明</li></ol><ul><li>JS是一种弱数据类型的语言，任何类型的变量都用关键子var来声明</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>赋值可以在声明的同时赋值，也可以在后面赋值</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// num=123</span>\n<span class="token keyword">var</span> num<span class="token punctuation">;</span>\nnum <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// num=123</span>\n<span class="token comment">// 两种方法是一样的</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>同时还有一种单一var模式</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span>\n    num2 <span class="token operator">=</span> <span class="token number">234</span>\n    num3 <span class="token operator">=</span> <span class="token number">345</span><span class="token punctuation">;</span>\n<span class="token comment">// 变量名上下对齐，这样结构更清晰，也能节省很多代码。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>变量命名规则</li></ol><ul><li>以英文字母开头或者_和$符开通。</li><li>变量名可以包含数字。</li><li>不可以使用系统自带的关键字、保留字。</li></ul><ol start="3"><li>值类型(数据类型)</li></ol><ul><li>不可改变的原始值。 <ul><li>主要有Numberf、String、Boolean、undefined、null堆数据。</li></ul></li><li>引用值Array、Object、Function栈数据。</li></ul><h1 id="javescript语句的基本规则" tabindex="-1"><a class="header-anchor" href="#javescript语句的基本规则" aria-hidden="true">#</a> JaveScript语句的基本规则</h1><ol><li>语句后面要用英文符分号(;)结束</li><li>JS语法错误会引发后续代码的终止，但不会影响其他的JS代码块</li></ol><blockquote><p>仅限于逻辑错误和低级语法错误导致代码全部执行不了。</p></blockquote><p>3 书写规范</p><h1 id="jaavescript运算符" tabindex="-1"><a class="header-anchor" href="#jaavescript运算符" aria-hidden="true">#</a> JAaveScript运算符</h1><ol><li>“+”数学上相加的功能和字符串拼接，“-、*、/、%”数学运算</li><li>相同的还有“++、--、==、+=、-=、&gt;、&lt;...”等</li><li>逻辑运算符&amp;&amp;、||、！</li></ol><ul><li>&amp;&amp;的作用是结果是true的时候才会继续执行，第一个纠错了第二不会执行，如果都是true的话返回最后一个表达式</li><li>||的作用是只要有一个表达式是true的后面就不走了，并且返回的结果是这个正确的表达式的结果，全是falses表达式返回的结果就是false</li></ul><blockquote><p>&amp;&amp;可以当作一种短路语句使用，||可以当作赋初值的作用</p></blockquote><ol start="4"><li>默认为False的值</li></ol><ul><li>undefined、null、“ ”、NaN、0、false</li></ul><h1 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h1><p>一. 显式类型转换</p><ol><li>用typeof可以检测数据的类型 <code>console.log(typeof(123)); // Number</code></li></ol><ul><li>typeof返回的结果有六种：<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>undefined</code>、<code>Object</code>、<code>Function</code></li><li>数组和null都属于Object</li><li>NaN属于Number，虽然是非数，但是也属于数字</li><li>typeof返回的结果是字符串</li></ul><ol start="2"><li>parselent(string, radix)</li></ol><ul><li>这个方法是将字符串转换成整型类型数字的，其中第二个参数radix基底是可以选择的参数。</li><li>当参数string里面既包括数字字符串又包括其他字符串的时候，它会将看到其他字符串就停止了，不会继续转换后面的数字型字符串了</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">parselnt</span><span class="token punctuation">(</span><span class="token string">&#39;123abc123&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 123;</span>\n<span class="token function">parselnt</span><span class="token punctuation">(</span><span class="token string">&#39;abc123&#39;</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>\n<span class="token function">parselnt</span><span class="token punctuation">(</span>‘<span class="token number">123</span>’<span class="token punctuation">)</span> <span class="token comment">// 123</span>\n<span class="token function">parselnt</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>当radix不为空的时候这个函数可以用作进制转换，把第一个参数的数字当成几进制的数字转换成十进制</li><li>radix参考范围是2~36</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> demo  <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token function">parselnt</span><span class="token punctuation">(</span>demo<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment">// 16</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li>parseFloat(radix)</li></ol><ul><li>这个方法和parselnt类似，时将字符串转换成浮点类型的数字，碰到第一个非数字类型停止</li><li>只能识别第一个小数点及后面的数字，第二个小数点不能识别。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;123.2.3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123.2</span>\n<span class="token function">parseFloat</span><span class="token punctuation">(</span>&#39;<span class="token number">123.2</span>abc<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123.2</span>\n<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;123.abc1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="4"><li>toString(radix)</li></ol><ul><li>这个方法是对象上的方法，任何数据类型都可以使用，转换成字符串类型，涉及到包装类。</li><li>同样是radix基底可选参数，为空仅仅将数据转换成字符串</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">typeof</span> demo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string/123</span>\n<span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string/true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>当写了radix时代表要将这个数字转换成几进制的数字型字符串</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\ndemo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>undefined和null没有toString方法</li></ul><ol start="5"><li>number(mix)</li></ol><ul><li>这个方法是可以把其他类型的数据转换成数字类型的数据</li></ul><ol start="6"><li>string(mix)</li></ol><ul><li>和number方法类似把任何类型转换成字符串</li></ul><ol start="7"><li>boolean(mix)</li></ol><ul><li>和number类似把任何类型转换为Boolean</li></ul><p>二. 隐式类型转换</p><ol><li>isNaN()</li></ol><ul><li>这个方法可以检测是不是非数类型，调用的number方法</li></ul><ol start="2"><li>算术运算符</li></ol><ul><li><code>++</code>就是将现有数据调用number之后，自身加一</li><li><code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>执行之前都会先进行类型转换，换成数字在运算</li></ul><ol start="3"><li>逻辑运算符</li></ol><ul><li><code>&amp;&amp;</code>、<code>||</code>、<code>!</code>都会调用boolean转换成布尔值，返回结果还是本身表达式的结果 <code>!abc; // false</code></li></ul><ol start="4"><li>不发生类型转换的比较运算符</li></ol><ul><li>===严格等于 ！==严格不等于</li></ul><h1 id="预编译" tabindex="-1"><a class="header-anchor" href="#预编译" aria-hidden="true">#</a> 预编译</h1><ul><li>函数声明提升：函数声明提升是一种整体提升，它会把函数声明和函数体一起提升到前面。</li><li>变量声明提升：变量声明提升是一种局部提升，它仅仅将变量的声明提前了，但是并没有将赋值一起提升</li></ul><ol><li>JS运行三部曲</li></ol><ul><li>语法分析</li><li>预编译</li><li>解释执行</li></ul><ol start="2"><li>预编译前奏</li></ol><ul><li>imply global</li><li>暗示全局变量，如果任何变量未经声明就赋值使用，此变量归Window所有，并且成为Window对象的一个属性</li><li>一切声明的全局变量，都是Window属性</li><li>未经声明的全局变脸可以懂delete操作来删除</li><li>函数在执行的前一刻产生一个上下文，Activeaction Object对象</li></ul><blockquote><p>这个对象是空的，但是里面有一些看不见的隐式属性：<code>this:window</code>属性和<code>arguments[]</code>;属性</p></blockquote><ol start="3"><li>预编译四部</li></ol><ul><li>创建AO对象</li><li>寻找形参和变量声明并当作属性名添加到AO对象中，值为undefined。（函数声明不叫变量）</li><li>将实参形参相统一</li><li>在函数体力寻找函数声明，将函数名当作属性名，值为这个函数的函数体</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">logo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    a <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">b</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">111</span>\n    <span class="token keyword">var</span> a<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token comment">// 1 222 function </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>var b = function (){}这种不叫函数声明，这个函数是给b赋值的，b变量是声明。</li><li>在第四步寻找函数声明并不会把赋值成function（）{}，执行到这一行的时候才会赋值成这个函数</li></ul><h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h1><p>一. 函数</p><ol><li>函数声明的3种方式</li></ol><ul><li>函数表达式：<code>var demo = function (){};</code></li><li>函数声明：<code>function demo (){};</code></li><li>命名函数表达式：<code>var demo = function xxx(){};</code></li></ul><ul><li>每一个函数里面都有一个类数组属性arguments，这个属性里面存的就是实参。</li><li>每一个函数有一个length属性，这个属性存的是形参的数量。</li><li>每一个函数都会有一个return，如果不屑的话函数会自动加一个return</li><li>return的功能有两个：返回这个函数的执行结果，终止函数的执行</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印结果3，不会打印hello</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>二. 作用域</p><ul><li>定义：变量（变量作用域又称为上下文）和函数生效（能被访问）的区域</li><li>JavaScript的函数是可以产生作用域的。</li><li>es5中的作用域只有全局作用域和函数作用域两种，es6新添加的块级作用域</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">test</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span> <span class="token comment">// log=&gt;234 就近打印局部变量，没有局部变量打印全局变量</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错，全局作用域无法访问局部作用域</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>函数作用域就好像一个屋子，里面的可以拿外面的东西，外面的不能拿里面的东西</li><li>在函数作用域里声明变量没有var的话，那么就生成了一个全局变量</li><li>两个不同的作用域（除了全局作用域）是不能相互访问的</li></ul><p>三. 作用域链</p><ul><li>既然函数存在作用域，函数又可以嵌套，那么作用域直接就会产生嵌套关系，这个时候就产生的作用域链</li><li>当代码在一个环境中执行时，会创建变量的一个作用域链来保证对执行环境有权访问的变量和函数的有序访问</li><li>作用域链第一个对象始终是当前执行代码所在环境的变量对象</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">demo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> dome_a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> demo_a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo_a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>本着对执行环境的有权和有序访问，每个函数的自身作用于总在作用域的最顶层，下一层就是这个函数的父级函数作用域....直到全局作用域。</li><li>因此test执行的时候大一一年的demo_a是本身作用域中的2而不是1，如果自身作用域没有demo_a的话系统就会沿着作用域链向下找到dome作用域的dome_a</li></ul><p>四. 闭包</p><ol><li>什么是闭包</li></ol><blockquote><p>闭包就是能够读取其他函数内部变量的函数</p></blockquote><ul><li>不同的作用域之间不能互相访问，但是如果在一个函数内部再定义一个函数并且这个内部函数与外部函数的变量有所关联。那么就可以返回这个函数来访问外部函数里面的变量，所以在本上闭包就是将函数内部与函数外部连结起来的桥梁。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> dome1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n    <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        dome1 <span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dome1<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 124</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li>当函数执行完函数的执行上下文就会被销毁，自然就无法访问里面的变量了，但是我们这个函数返回了一个依赖于这个函数的新函数。也就是说这个没有被销毁的新函数的作用域链中存在着原本函数作用域的引用，就导致原本函数的上下文不会被销毁，返回的新函数是原本函数的闭包函数</li></ul><ol start="2"><li>使用闭包的注意点</li></ol><ul><li>闭包会使函数的变量都保存在内存中，内存消耗很大，不能滥用，否则会造成网页的性能问题，IE会造成内存泄漏</li></ul><blockquote><p>解决的方法就是在退出函数时，将不使用的局部变量删除</p></blockquote><ul><li>闭包会在父函数外部改变父函数内部的值，如果把闭包当对象使用，那么就把闭包当做它的公用方法，把内部变量当做它的私有属性。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;global&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span><span class="token string">&#39;obj&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">getNamu</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nogj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// obj</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>累加器</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">addNum</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        num <span class="token operator">++</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> addNum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n<span class="token keyword">var</span> demo1 <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n<span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>五. 立即执行函数</p><ul><li>立即执行函数时解闭包的一个重要方法，但是注意闭包是没有办法接触的，只能通过一个新的闭包来消除上一个必报的影响</li><li>立即执行函数不需要被定义，直接执行，执行完释放，经常用做初始化</li><li>函数声明不能被执行，但是函数表达式可以</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token function">functiion</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">retruB</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n     arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n     <span class="token punctuation">}</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span>\n <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> save <span class="token operator">=</span> <span class="token function">returnB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsosle<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>save<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    save<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h1 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h1><ol><li>对象的创建方式</li></ol><ul><li>对象字面量 <code>var obj = {};</code></li><li>这样的方式是最简单最常用的方法</li><li>对象里面有属性，属性之间用逗号相隔，每条属性都有属性名和值，属性名和属性值用分号分隔</li></ul><ol start="2"><li>构造函数(constructor)</li></ol><ul><li>构造函数也分为两种，系统自带的构造函数和自定义的构造函数</li><li>创建对象的构造函数Object() <code>var object = new Object();</code></li></ul><blockquote><p>通过这条语句就创建了一个空对象，它的作用和var obj = {};的作用一样</p></blockquote><ul><li>系统自带的构造函数还是Number()、String()、Boolean()、Array()</li></ul><ol start="3"><li>自定义构造函数</li></ol><ul><li>自定义的构造函数时最常用的构造函数</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> operson <span class="token operator">=</span> enw <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">typeof</span> operson <span class="token comment">// object</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>用new操作符创造出来的对象，尽管使用的时要给构造函数，但是之间没有关联。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    thia<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>创建对象的时候只有new才会有this</li><li>重点：为生命可以用new操作符创建相互独立的对象？</li><li>用new操作符的时候，这个new在构造函数里面饮食的创建了一个this对象，并且最后返回了这个this对象</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">&#39;list&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    that<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> that<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>如果最后返回的是对象，那么this就失效，但是如果显示返回的是原始值那么this还是有效的。</li></ul><ol start="4"><li>属性的增删改查</li></ol><ul><li>增：可以通过对象名+点+属性名的方法来给对象添加新的属性并且赋值</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> ogj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">,</span>mame <span class="token operator">=</span> <span class="token string">&#39;tan&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>查：查看属性的功能<code>console.log(xxx)</code></li><li>删：删除属性需要借助delete操作符</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name <span class="token operator">=</span> <span class="token string">&#39;scerlett&#39;</span>\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// scerlett</span>\n<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h1 id="原型与原型链" tabindex="-1"><a class="header-anchor" href="#原型与原型链" aria-hidden="true">#</a> 原型与原型链</h1><p>一. 原型：prototype</p><ul><li>原型的定义：原型是function对象的一个属性，它定义了构造函数制造出来的对象的共有祖先，通过该构造函数产生的对象。</li><li>可以继承该原型的属性和方法，原型也是对象。 <code>function Person(){}</code></li><li>定义一个构造函数，Person.prototype这个属性就是这个构造函数的原型，这个属性天生就有的，并且这个属性的值也是一个对象。</li><li>可以在person.prototype上面添加属性和方法，每一个构造出来的对象都可以继承这些属性和方法</li><li>虽然每一个对象都是独立的，但是它们都有共同的祖先，当访问这个对象属性的时候，如果他没有这个属性，就会向上查找，找到它原型，然后再原型上访问这个属性</li></ul><ol start="2"><li>利用原型特点的概念，可以提取共有属性</li></ol><ul><li>可以把每一个对象都有的公有属性不写在构造函数里面，而是提取到原型上，这样当构造函数构造大量的对象的时候就不要走多次构造函数里面的赋值语句了。</li><li>而只需要走一遍，每个对象调用属性的时候直接上原型上查找就可以了。</li></ul><ol start="3"><li>对象查看原型</li></ol><ul><li>用构造函数构造对象的时候，就会隐式创建一个this对象，这个this对象里面有一个默认的属性叫做proto属性，这个属性的值就是指向对象的原型。</li><li>当查找的属性是自身没有的属性的时候，就会查找proto这个属性，然后这个属性指向原型，所以就到原型上查找属性。</li></ul><blockquote><p>注意：prototype是函数的属性，proto是对象的属性</p></blockquote><ol start="4"><li>查看构造自身的构造函数</li></ol><ul><li>在prototype里面，有一个隐式的属性叫做constructor，这个属性记录的就是对象的构造器，里面存的就是构造函数 <code>console.log(person.constructor); // function Person(){}</code></li></ul><p>二. 原型链</p><ol><li>有了原型，原型还是一个对象，那么这个名为原型的对象自然还有自己的原型，这样的原型上还有原型的机构就构成了原型链</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Gra</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>firsName <span class="token operator">=</span> <span class="token string">&#39;scarlett&#39;</span>\n<span class="token keyword">function</span> <span class="token function">Gra</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;grandfather&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> grandfoo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngrandfoo<span class="token punctuation">.</span>word <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>\nFoo<span class="token punctuation">.</span>prototoype <span class="token operator">=</span> grandfoo<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">&#39;18&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>moner <span class="token operator">=</span> <span class="token string">&#39;100&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;son&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> father<span class="token punctuation">;</span>\n<span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li>Foo创造出来的每一个对象都继承来自grandfoo对象，son的每一个对象都继承来自father这个由FOO创造出来的对象，这样son就可以继承上卖弄Foo和Gra的所有属性。</li><li>这种链式的查询结构叫做原型链，最终的尽头是Object.prototype这个对象</li><li>如果没有规定原型的对象，它的原型就是Object.prototype</li></ul><ol start="2"><li>但是并不是所有的对象都有原型，比如使用Object.create方法</li></ol><ul><li>Object.create()这个方法需要写一个参数，这个参数就是看hi这个对象的原型，如果要构造一个和<code>var obj = {};</code>一样的对象，就需要写：<code>var obj = Object.create(Object.prototype);</code></li><li>也可以写一个自定义的属性，让他成为原型</li></ul><ol start="3"><li>原型链上的曾删改查</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nperson1<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1234</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>删：删除属性需要借助delete操作符，对象不能删除原型上的属性</li><li>改：</li><li>查：</li></ul><h1 id="继承、this" tabindex="-1"><a class="header-anchor" href="#继承、this" aria-hidden="true">#</a> 继承、this</h1><ol><li>this的一些问题</li></ol><ul><li>函数内部的this默认指向window，可以使用call/apply来改变this的指向 <ul><li>区别：后面传参形式不同</li><li>apply把参数放在数组里</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">person</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;scarlett&#39;</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// this指向window，name属性自然就是window上的全局属性</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Object.{name:&#39;scarlett&#39;}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="2"><li>继承</li></ol><ul><li>圣杯模式</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token keyword">var</span> inherit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Target<span class="token punctuation">,</span> Origin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Target<span class="token punctuation">,</span> Origin</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Origin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n        <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constuctor <span class="token operator">=</span> Target<span class="token punctuation">;</span>\n        <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uber <span class="token operator">=</span> <span class="token class-name">Origin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h1 id="对象的枚举与this" tabindex="-1"><a class="header-anchor" href="#对象的枚举与this" aria-hidden="true">#</a> 对象的枚举与this</h1><ol><li>对象的枚举</li></ol><ul><li>查看对象属性可以用<code>obj.name</code>查看，也可以用<code>obj[&#39;name&#39;]</code>类数组方式查看，但事实上是数组模仿了对象的查看方式</li></ul><ol start="2"><li>for-in操作符</li></ol><ul><li>要枚举一个数组的所有属性只需要用一个for循环从头到尾遍历一遍就可以了，但是对象并不能用for循环来遍历属性，所以就要用到for-in操作</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;scarlett&#39;</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span><span class="token string">&#39;female&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prop <span class="token operator">+</span> <span class="token string">&#39;:&#39;</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>for-in循环会按照属性的顺序取出属性名然后然后赋值给变量prop，所有打印prop都是属性名，<code>obj[prop]</code>则是相对应的属性的值。</li></ul><blockquote><p>注意：这里不能写成obj.prot的方式，因为在系统底层会转化成<code>obj[prop]</code>的形式，但是并没有prop属性，它只是一个变量。</p></blockquote><ul><li>在非严格模式中，for-in循环都会把原型里面的一些属性一起打印出来，但es5的严格模式不会。</li></ul><ol start="2"><li>三种操作符</li></ol><ul><li>hasOwnProperty这个操作符的作用是查看当前这个属性是不是对象自身的属性，在原型链上的属性会被过滤掉，自身的返回true</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;scarlett&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>\n    age<span class="token operator">:</span> <span class="token number">18</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> oPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> oPerson<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>oPerson<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oPerson<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li><p>这样for-in循环就只会打印自身的属性，而不会打印原型上的属性</p></li><li><p>in操作符：这个操作符的作用是查看一个属性是不是在这个对象或者它原型里面。</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> oPerson<span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token string">&#39;sex&#39;</span> <span class="token keyword">in</span> oPerson<span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>instanceof操作符：查看前面的对象是不是后面的构造函数构造出来的，和constructor很像。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>oPerson <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">oPerson</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li>this</li></ol><ul><li>预编译过程中this指向window</li><li>全局作用域里this指向window</li><li>call/apply可以改变this指向</li><li>obj.func() func()里的this指向obj这个对象</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    height<span class="token operator">:</span> <span class="token number">190</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">eat</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// eat在没有执行前，谁也不知道this指向谁</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 谁调用，this指向谁</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>如果能理解下面的这段代码的this指向问题，那么就掌握的this的所有知识点了</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;222&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;111&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> fun <span class="token operator">=</span> a<span class="token punctuation">.</span>say<span class="token punctuation">;</span>\n<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;222&#39;此时只是把a.say这个函数体赋值给fun变量，相当于在全局空间写下来一个fun函数，this指向window.</span>\na<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ‘111’ 谁调用，this指向谁</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;333&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fun</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nb<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ‘222’ 其实何在全局调用a.say的函数体方法差不多</span>\nb<span class="token punctuation">.</span>say <span class="token operator">=</span> a<span class="token punctuation">.</span>say；\nb<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ‘333’ this指向B</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h1 id="克隆与数组" tabindex="-1"><a class="header-anchor" href="#克隆与数组" aria-hidden="true">#</a> 克隆与数组</h1><ol><li>arguments.callee()</li></ol><ul><li>指代函数本身，当在一些匿名函数或者立即执行函数里面进行递归调用函数本身的时候，由于没有名字，就用这种方式调用。</li><li>一般当需要通过计算来进行初始化的时候，写一个立即执行函数，当这个立即执行函数还需要递归调用自身的时候，就用这种方式调用。</li></ul><ol start="2"><li>function.caller()</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>caller<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">demo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>这是函数本身自带的一个属性，可以指出当前函数的uber运行环境的函数引用，就是这个函数在那个函数里面执行的。</li></ul><ol start="3"><li>克隆（clone）</li></ol><ul><li>克隆和继承有一些区别，克隆是复制出来一模一样的目标对象又分为浅度克隆和深度克隆</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">clone</span> <span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> tar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> tar <span class="token operator">=</span> tar <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            tar<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span><span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> tar<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>当有一个属性是引用值（数组、对象）时按照这种克隆模式，只是把这个引用值的堆地址赋值给新的目标对象，一旦改变了源对象或目标对象的引用属性，另一个也跟着改变，这一点就是浅克隆的缺点。</li><li>深度克隆的原理很简单，只要不克隆引用值的引用而是把引用值也当作一个源对象，把里面的值一个个克隆到目标对象里面，就解决了二者相同指向的问题</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> tar <span class="token operator">=</span> tar <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            tar<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>tar<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">,</span> src<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            tar<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> tar<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>这个时候目标对象和源对象的引用值就没有关系了，都是独立值可以进行修改。</li></ul><ol start="4"><li>数组（arrty）</li></ol><ul><li>数组的声明有两种：字面量方式声明数组、通过数组构造函数构造数组</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 1,2,3,4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>注意：如果构造函数参数只有一个数字的时候那么这个时候就不是第一个值得意思了，而是数组长度</p></blockquote><ul><li>js中的数组是弱类型数组，不可以溢出读，但可以溢出写</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\narr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,..5</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>数组的常用方法：不可改变原数组和改变原数组</li><li>改变原数组： <ul><li><code>reverse</code>使数组倒序</li><li><code>sort</code>快速排序</li><li><code>push</code>在数组末位添加数据</li><li><code>pop</code>从数组最后一位删除同时返回被删除得数据</li><li><code>shift</code>从数组第一位删除同时返回被删除的数据</li><li><code>unshift</code>在数组第一位前面添加数据</li><li><code>splice</code>截取，三个参数。第一个使截取开始的位置，第二个是截取的长度，第三个是一组数据，在截取的位置添加数据</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr<span class="token punctuation">.</span>solice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [1,100,200,3,4,5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><pre><code>+ `sort`它将一种算法封装号给我们使用，可以在这个方法中传入一个参数，这个参数是一个函数，规定了paix规则，否则按照ASC码排序，如果数组中的元素是比较复杂的数据，可以自己来定义排序的规则\n```js\narr.sort(function (x, y){\n    return x.age &lt; y.age;\n})\n```\n+ 这里的x，y代表数据里任意两位数据，无论中间规则怎么写，系统只关注函数最后返回的值，是正数还是负数，正数的时候表示y在前面x在后面，负数表示x在前面b在后面\n+ 乱序排序：\n```js\nfunction order (a, b) {\n    var num = Math.random() - 0.5\n    return num;\n}\n```\n</code></pre><ul><li>不可改变原数组 <ul><li><code>concat</code>这个方式是连接数组的作用，如果要连接多个数组的话中间用逗号相隔</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr1 =&gt; [1,2,3,4]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>join</code>让数组的每一个数据一什么样的方式连接成字符串</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// a-b-c-1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>split</code>刚好和<code>join</code>相反，把字符串一什么方式分割成数组</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> sta <span class="token operator">=</span> <span class="token string">&#39;How are you&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> sta<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr =&gt; [&#39;How&#39;, &#39;are&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><ol start="5"><li>数组去重</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">unique</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>\n        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                obj<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">323</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>这里运用了一个简单的哈希结构，当数组中的这个数据出现过一次之后，就在obj中将这个元素当作属性并赋值为1.后面如果出现相同的元素，因为这个元素在obj中已经存在且值为1，就不会添加到新数组里，最后把新数组返回。</li></ul><ul><li>ES5的数组方法： <ul><li><code>forEach</code>会改变原数组，让数组中的元素从头到尾遍历一遍，每一个都调用一下，forEach的参数是一个函数。</li><li><code>map</code>和forEach类似，forEach会改变原数组，map不会改变原数组，二十四返回一个新的数组，参数也是一个函数。</li><li><code>filter</code>过滤的作用，不会改变原数组，而是返回一个数组额的子集，参数为函数，当函数返回true是会把当前元素添加到新数组里，返回false则不会被添加到新数组里</li><li><code>every</code>和<code>some</code>数组的逻辑判定，堆数组应用指定的函数进行判定，返回true或false。 every如果每一个元素经过传递的方法的判断都是true的时候，才会返回true some只要又一个返回true就会返沪true</li><li><code>reduce</code>和<code>reduceRight</code>使用指定的函数将数组元素进行组合，最后变成一个值，reduce是从左到右。 reduceRight是从右到左，有两个参数，第一个是方法，第二个是可选参数，即最后的这个值是初始值，当没有设置参数的时候，用数组的第一个元素的值作为初始值，不过当数组为空时，不带初始值就会报错。 当数组只有一个元素并且没有指定初始值，或者有一个空数组并且指定一个初始值的情况下reduce值时简单的返回那个值，而不会跳用函数</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> sum <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 + 1 + 2 +3 = 6</span>\n<span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> tempOut <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 不会调用这个函数，因为数组只有一个值，除非设置一个初始值</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><ol start="6"><li>数组类型的检测</li></ol><ul><li>在ES5中，有一个isArray()方法来检测是否时数组，但是在ES5之前要检测是否时数据类型很麻烦</li></ul><blockquote><p>typeof运算符：数组和对象都会返回object，无法分清数组和对象</p><ul><li>constructor和instanceof操作符时目前位置最好用的，但都存在潜在问题 web浏览器中可能有多个窗口或窗体，每一个窗体有自己的js环境，有自己的全局对象，并且每个全局对象有自己的构造函数，因此一个窗体中的对象将不可能时另外窗体中的构造函数的实列，窗体之间的混淆不常发生，但这个问题已经证明constructor和instanceof都不能真正可靠的检测数组类型。</li></ul></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// =&gt; &#39;[Object Array]&#39;</span>\n<span class="token comment">// 这个是最可靠的检测是否是数组类型的方法</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="类数组与严格模式" tabindex="-1"><a class="header-anchor" href="#类数组与严格模式" aria-hidden="true">#</a> 类数组与严格模式</h1><ul><li>有两种数据叫做数组和对象，其实可以用对象来模拟初数组的效果，这种对象就叫做类数组前面提到的arguments就是类数组</li></ul><ol><li>类数组：</li></ol><ul><li>类数组并不是一个数组，，但是它可以表现出数组的特性</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arrObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;0&#39;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;1&#39;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;3&#39;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;length&#39;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;push&#39;</span><span class="token operator">:</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push\n<span class="token punctuation">}</span>\n<span class="token comment">// 这样就创造出了一个类数组</span>\narrObj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrObj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ----&gt;&gt; </span>\n<span class="token comment">/*var arrObj = {\n    &#39;0&#39;: 1,\n    &#39;1&#39;: 2,\n    &#39;2&#39;: 3,\n    &#39;3&#39;: 4,\n    &#39;length&#39;: 3,\n    &#39;push&#39;:Array.prototype.push\n}*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li>它自动改变了length的值，其实类数组的关键就在length属性上，如果没有length属性，那么就是一个普通的对象，即使有push也不能用</li><li>模拟数组的push方法的实现原理</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>push的方法就是在数组的最后以为添加一个值，也就是length位置加一个元素，然后把length加一，这样就不难理解为什么有了length属性的对象，可以调用数组的push方法了，因为它本身有一个合法的length属性。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arrObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;3&#39;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;4&#39;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;a&#39;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;b&#39;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;length&#39;</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;push&#39;</span><span class="token operator">:</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push\n<span class="token punctuation">}</span>\narrObj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\narrObj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/*var arrObj = {\n    &#39;2&#39;: 3,\n    &#39;3&#39;: 6,\n    &#39;4&#39;: 2,\n    &#39;a&#39;: 3,\n    &#39;b&#39;: 4,\n    &#39;length&#39;:4,\n    &#39;push&#39;:Array.prototype.push\n}*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ol start="2"><li>try...catch</li></ol><ul><li>try{}catcj(e){}; finally{}一般用来检测可能出错的问题，可以把可能出错的代码放在try里面，然后弱国出错会产生反应的代码放在catch里面，final也就是当catch走完之后再走一下finally代码块，finally用处不是很大。</li><li>catch里的参数e一定要有，系统会自动传进去错误信息，错误信息一般分为6种： <ul><li>EvalError eval()的使用和定义不一致</li><li>RangeError 数组越界</li><li>ReferenceError 非法或不能识别的引用数值</li><li>SyntaxErroe 发生语法解析错误</li><li>TypeError 操作数类型错误 URIError URI处理函数使用不当</li></ul></li><li>当try里面的代码出错了，try里面出错后面的代码就不会执行了，但在try外面的还可以正常执行</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">try</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment">// ReferenceError:a is not defined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li>ES5严格模式</li></ol><ul><li><p>ES5严格模式是一种全新的ES5规范，在这个模式下，有一些es3的不标准规则就不能使用了</p></li><li><p>只要写上 <code>“use strict”;</code>这一行字符串就可以进入严格模式，不会堆不兼容严格模式浏览器产生影响，只要有两种用法：</p><ul><li>全局严格模式：就i是在js代码的第一行协商·不推荐使用</li><li>局部严格模式：就函数里的第一行写上字符串</li></ul></li><li><p>严格模式的作用</p><ul><li>当代码进入严格模式后，就不允许使用with函数，arguments.callee方法，function.caller属性</li><li>变量赋值之前必须使用</li><li>局部的this使用之前必须被赋值，除了全局的this默认指向window，其他的默认都是undefined，而且在非严格模式下Person.call(null/undefined)之后，里面的this还是指向window，但是如果严格模式那么传递null/undefined，this就是指向null/undefined</li><li>拒绝重复属性和参数，不过有一些浏览器的属性名可以重复</li></ul></li><li><p>with方法是改变作用域链，可以把括号里面的执行期上下文或者作用域放在自己的作用域最顶端</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>\n    <span class="token keyword">with</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 222</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>本来没有with的话，在test函数里面作用域链的最顶端应该是自，下面次啊是window的作用域，但是有了with就会优先调用obj里面的a</li></ul><h1 id="dom开始" tabindex="-1"><a class="header-anchor" href="#dom开始" aria-hidden="true">#</a> DOM开始</h1><ul><li>DOM的全称Document Object Model文档对象模型， dom定义了表示和修改文档所需的对象，这些对象的行为和属性以及这些对象之间的关系</li><li>dom对象即为宿主对象，由浏览器厂商定义，用来操作html和css功能的一类对象和集合，浏览器厂商大部分都遵循了W3C的规则</li></ul><ol><li>dom如何操作html</li></ol><ul><li>document代表整个文档，它也是一个dom元素，都没可以堆html做一些增删改查的操作</li><li>css中有id、class标签等选择器，同样documeng对象上也有很多定义了类似的方法查看元素节点。</li></ul><ol start="2"><li>getElementById</li></ol><ul><li>document.getElementById(&#39;id);方法是通过元素的id来选择相对应元素的，因为id是唯一标识。在IE8一下的浏览器中，不区分大小写，而且通过name也能当作id选择出来</li></ul><ol start="3"><li>getElementsByClassName</li></ol><ul><li>获取到的是一个类数组，因为很多元素都可以用一个类名，可以通过【】的方法具体到那一个元素。</li></ul><ol start="4"><li>getElementsByTagName</li></ol><ul><li>通过标签名选择出来具体某一种元素的集合</li></ul><ol start="5"><li>getElementsByName</li></ol><ul><li>只有部分标签适用，表单、表单元素、img、iframe等</li><li>这里最常用的就是getElementById和getElementsByTagName因为所有浏览器都支持</li></ul><ol start="6"><li>querySelector()和querySelectorAll()</li></ol><ul><li>选择元素最强的是CSS，而这两个里面写的参数就是CSS选择器的写法</li><li>不过querySelector永远选择一组里面的第一个，所以返回的不是一个类数组而是一个具体的元素而如果要返回类数组的话就用querySelectorAll()写法。</li><li>不过这两个方法的问题在于，它返回的不像前面四个是一个实时改变的元素，而是一个副本，用这种方法选择出来的元素把本身元素改变而这个不会被改变</li></ul><p>二. 节点</p><ol><li>节点类型</li></ol><ul><li>元素节点、文本节点、注释节点、属性节点等，可以通过nodeType属性来查看这个节点类型nodeType返回的是数字 <ul><li>元素节点 ---&gt; 1</li><li>属性节点 ---&gt; 2</li><li>文本节点 ---&gt; 3</li><li>注释节点 ---&gt; 8</li><li>docuemnt ---&gt; 9</li><li>DocumentFragment ---&gt; 11</li></ul></li></ul><ol start="2"><li>节点的其他属性</li></ol><ul><li>nodeName这个属性可以返回元素的标签名，以大写形式表示，只读。</li><li>有几个特殊节点返回的不一样 <ul><li>文本节点 ---&gt; #text</li><li>document节点 ---&gt; #document</li></ul></li><li>nodeValue Text节点或者Comment节点的文本内容，可以读写</li><li>attributes把行间样式的属性都读取出来，放到一个对象中返回，对象里每一个属性都是一个节点，这个节点就是属性节点</li></ul><blockquote><p>注意：对象里面的属性叫做property，而元素里的属性叫做attributes，实际应该叫特性</p></blockquote><ul><li>节点还有一个方法：hasChildNodes()可以检测是否有节点</li></ul><ol start="2"><li>遍历节点树</li></ol><ul><li><code>parentNode</code>查找父节点</li><li><code>childNodes</code>子节点</li><li><code>firstChild</code>第一个子节点</li><li><code>lastChild</code>最后一个子节点</li><li><code>nextSibliing</code>下一个兄弟节点</li><li><code>previousSibling</code>上一个兄弟节点</li></ul><blockquote><p>以上这些方法兼容性很好，所有浏览器都支持。</p></blockquote><ol start="3"><li>基于元素系欸但树的遍历</li></ol><ul><li><code>parentElement</code>返回当前元素的父元素节点，在这个方法上卖弄，html上面的父元素就不是docuent而是null，IE不支持！！！</li><li><code>children</code>所有的子元素节点，这个方法所有浏览器都兼容</li><li><code>childElementCount</code> node.children.length === node.childElementCount，这个属性就素hi子元素节点的数量，常用的是children。</li><li><code>nextElementSibling和previousElementSibling</code>这两个分别是查找上一个和下一个兄弟元素，IE不兼容！！！</li></ul><p>三. DO树总结</p><ul><li>getID方法定义在Document.prototype上，即Element上不能使用。</li><li>getElementByName方法定义在HTMLDocument.prototype上，非html中的document不能使用（xmd document、Element）</li><li>getElementsByTagName方法定义在Document.prototype和Element.prototype上，document和元素都可以使用这个方法</li><li>HTMLDocument.prototype上定义了一些常用属性，body和head分别代表HTML文档中所对应的标签</li><li>Document.prototype上定义了Document.Element属性，指代文档的根元素&lt;html&gt;标签</li><li>getElementByClassName、query Selector All、quuerySelector和Document、Element类中均有定义</li></ul><h1 id="dom的基本操作代码" tabindex="-1"><a class="header-anchor" href="#dom的基本操作代码" aria-hidden="true">#</a> dom的基本操作代码</h1><ul><li>前面介绍了DOM的基本知识，这里是一些上面知识点的分装函数</li></ul><ol><li>遍历元素节点树</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">retChild</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">,</span>\n        len <span class="token operator">=</span> child<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',250),t={},e=(0,a(744).Z)(t,[["render",function(n,s){return p}]])},744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);